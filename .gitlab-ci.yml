stages:
    - build
    - test
    - bench
    - deploy

cache:
    paths:
        - .cache/conan/data
        - .cache/ccache/data

variables:
    FEDORA_RAWHIDE: "${CI_REGISTRY}/olena/pylene-dockers/fedora-rawhide"
    FEDORA_31: "${CI_REGISTRY}/olena/pylene-dockers/fedora-31"
    FEDORA_32: "${CI_REGISTRY}/olena/pylene-dockers/fedora-32"
    CMAKE_BUILD_PARALLEL_LEVEL: 6
    CONAN_UPLOAD: "https://artifactory.lrde.epita.fr/artifactory/api/conan/lrde-public@True"
    CONAN_USERNAME: "lrde"
    CONAN_LOGIN_USERNAME: "carlinet"
    CONAN_CHANNEL: "unstable"                                                     # Conan tag
    CONAN_STABLE_CHANNEL: "stable"                                                # Conan tag
    CONAN_STABLE_BRANCH_PATTERN: "master$"
    CONAN_PASSWORD: $CONAN_LRDE_API_KEY
    CONAN_CMAKE_GENERATOR: Ninja
    ASAN: "OFF"
    MSAN: "OFF"
    UBSAN: "OFF"
    CCACHE_DIR: "${CI_PROJECT_DIR}/.cache/ccache/data"
    CCACHE_MAXSIZE: 2G

before_script:
        - conan config set storage.path="${CI_PROJECT_DIR}/.cache/conan/data"
        - conan profile new --detect default
        - ccache -p
        - ccache -s

########
# Test #
########

windows-debug:
    before_script:
        - conan config set storage.path="${env:CI_PROJECT_DIR}\.cache\conan\data"
        - Invoke-BatchFile -Path "${env:VCVAR2019}" -Parameters "${env:ARCH}"
    stage: build
    script:
        - mkdir build; cd build
        - conan install .. -s build_type=Debug --build missing -s compiler.cppstd=20
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=debug -D CMAKE_TOOLCHAIN_FILE="C:\vcpkg\scripts\buildsystems\vcpkg.cmake"
        - cmake --build . --target build-tests
        - ctest -L UnitTests --schedule-random --output-on-failure
    dependencies: []
    artifacts:
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 1 week
    tags: [ windows ]
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"
        - when: manual
          allow_failure: true
    variables:
        VCVAR2019: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat'
        ARCH: x64
        CONAN_USE_ALWAYS_SHORT_PATHS: 1

.job-build-linux-base: &distcheck-linux-base
    stage: build
    script:
        - mkdir build && cd build
        - conan install .. --build missing -s compiler.cppstd=20 -e CXXFLAGS="" -e CCFLAGS="" -pr $CONAN_PROFILE
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=$PYLENE_CONFIGURATION -DSANITIZE_ADDRESS=$ASAN -DSANITIZE_MEMORY=$MSAN -DSANITIZE_UNDEFINED=$UBSAN
        - cmake --build . --target Pylene
        - cmake --build . --target pylena
        - cmake --build . --target build-tests
        - ctest -L UnitTests --schedule-random --output-on-failure
    dependencies: []
    artifacts:
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 1 week

# Msan not available for gcc. It requires instrumented libstdc++ and instrumented thirdparties so it is disabled for now.
# No tsan because no multithreaded code for now
# Asan, memsan and tsan are incompatible with each other within the same binary
# Asan and ubsan can work together


distcheck-linux-gcc9-release:
    <<: *distcheck-linux-base
    image: ${FEDORA_31}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "g++"
        CC: "gcc"
        CONAN_PROFILE: "gcc-9"


distcheck-linux-gcc9-debug-asan-ubsan:
    <<: *distcheck-linux-base
    image: ${FEDORA_31}
    variables:
        PYLENE_CONFIGURATION: "Debug"
        CXX: "g++"
        CC: "gcc"
        ASAN: "ON"
        MSAN: "OFF"
        UBSAN: "ON"
        CONAN_PROFILE: "gcc-9"

distcheck-linux-clang10-release:
    <<: *distcheck-linux-base
    image: ${FEDORA_32}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "clang++"
        CC: "clang"
        CONAN_PROFILE: "clang-10"
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"

distcheck-linux-clang10-debug:
    <<: *distcheck-linux-base
    image: ${FEDORA_32}
    variables:
        PYLENE_CONFIGURATION: "Debug"
        CXX: "clang++"
        CC: "clang"
        ASAN: "ON"
        MSAN: "OFF"
        UBSAN: "ON"
        #CCFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
        #CXXFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
        CONAN_PROFILE: "clang-10"

distcheck-linux-gcc10-release:
    <<: *distcheck-linux-base
    image: ${FEDORA_32}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "g++"
        CC: "gcc"
        CONAN_PROFILE: "gcc-10"
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"


distcheck-linux-gcc10-debug:
    <<: *distcheck-linux-base
    image: ${FEDORA_32}
    variables:
        PYLENE_CONFIGURATION: "Debug"
        CXX: "g++"
        CC: "gcc"
        #CCFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
        #CXXFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
        ASAN: "ON"
        MSAN: "OFF"
        UBSAN: "ON"        
        CONAN_PROFILE: "gcc-10"


distcheck-linux-coverage:
    <<: *distcheck-linux-base
    image: ${FEDORA_32}
    after_script:
        - mkdir coverage 
        - cd build && gcovr --root .. --filter '\.\./pylene' . -s --xml ../cobertura --html-details ../coverage/index.html
    variables:
        PYLENE_CONFIGURATION: "Debug"
        CXX: "g++"
        CC: "gcc"
        CXXFLAGS: "-fprofile-arcs -ftest-coverage"
        CFLAGS: "-fprofile-arcs -ftest-coverage"
        CONAN_PROFILE: "gcc-10"
    artifacts:
        paths:
            - coverage/
        reports:
            cobertura: cobertura
        expire_in: 1 week
    coverage: '/lines: \d+\.\d+\%/'
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"

#########
# Bench #
#########

.job-bench-linux-base: &distbench-linux-base
    stage: bench
    script:
        - mkdir build && cd build
        - conan install .. -pr gcc-9 --build missing -s compiler.cppstd=20
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Release
        - cmake --build . --target fetch-external-data
        - cmake --build . --target build-bench
        - cmake --build . --target run-all-benchmarks
        - ctest -L SpeedTests -V
    tags: [ "pylene-benchmarks" ]
    when: manual
    dependencies: []
    artifacts:
        name: "benchmark-results"
        paths:
            - build/bench/*.json
        expire_in: 1 week

distbench-linux-gcc9-release:
    <<: *distbench-linux-base
    image: ${FEDORA_31}
    variables:
        CXX: "g++"
        CC: "gcc"



#################
# Documentation #
#################

.documentation-base:  &documentation-base
    image: ${FEDORA_31}
    stage: build
    script:
        - mkdir build && cd build
        - conan install -u .. -pr gcc-9 --build missing -s compiler.cppstd=20
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Release
        - cmake --build . --target build-doc
        - mkdir ../public && mv doc/sphinx/* ../public/
    artifacts:
        name: "documentation"
        expire_in: 1 week
        paths:
            - public/

# Generate doc only
documentation:
    <<: *documentation-base
    except:
        - master


##########
# Deploy #
##########

pages:
    <<: *documentation-base
    only:
        - master

.package:
    stage: deploy
    dependencies: []
    script:
        - python3 package-conan.py
    rules:
        - if: $CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"
        - if: $CI_COMMIT_BRANCH == "next"

package gcc-9:
   extends: .package
   image: ${FEDORA_31}
   variables:
        CONAN_BASE_PROFILE: gcc-9

package gcc-10:
   extends: .package
   image: ${FEDORA_32}
   variables:
        CONAN_BASE_PROFILE: gcc-10

package clang-10:
   extends: .package
   image: ${FEDORA_32}
   variables:
        CONAN_BASE_PROFILE: clang-10

