stages:
    - build
    - test
    - bench
    - deploy

variables:
    DOCKER_IMAGE: "${CI_REGISTRY}/olena/pylene/build-toolset"
    BUILD_DOCKER: 'false'
    PACKAGE_NAME: "pylene" # Conan package name
    PACKAGE_TAG: "testing" # Conan tag
    PACKAGE_VERSION: "head" # Version to build
    CONAN_USER: "lrde"


#########
# Build #
#########
.job-build-docker-base: &build-docker-base
    stage: build
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build -t ${DOCKER_IMAGE} -f utils/docker/Dockerfile --no-cache .
        - docker push ${DOCKER_IMAGE}

build-docker-manual:
    <<: *build-docker-base
    when: manual

build-docker-automatic:
    <<: *build-docker-base
    only:
        variables:
            - $BUILD_DOCKER =~ /true/i


########
# Test #
########

.job-build-linux-base: &distcheck-linux-base
    image: ${DOCKER_IMAGE}
    stage: test
    script:
        - mkdir build && cd build
        - conan install .. -pr $BUILD_PROFILE --build missing
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=$PYLENE_CONFIGURATION -DPYLENE_CODE_COVERAGE=OFF
        - cmake --build . --target build-fixtures --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-pylene --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-apps --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-cli --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-tests --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - ctest -L UnitTests --schedule-random --output-on-failure
        - cmake --build . --target build-pybind --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target run-all-pytests --config $PYLENE_CONFIGURATION
        - cmake --build . --target dist --config $PYLENE_CONFIGURATION
    dependencies: []
    artifacts:
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml, build/pybind/UTPy_*.xml]
        expire_in: 15 days

.job-build-linux-coverage: &distcheck-linux-coverage
    image: ${DOCKER_IMAGE}
    stage: test
    script:
        - mkdir build && cd build
        - conan install .. -pr $BUILD_PROFILE --build missing
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=$PYLENE_CONFIGURATION -DPYLENE_CODE_COVERAGE=ON -DGCOV_PATH=$(which $COV)
        - cmake --build . --target build-fixtures --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-pylene --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-apps --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-cli --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-tests --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - ctest -L UnitTests --schedule-random --output-on-failure
        - cmake --build . --target build-pybind --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target run-all-pytests --config $PYLENE_CONFIGURATION
        - cmake --build . --target run-tests_coverage-gcovr-html --config $PYLENE_CONFIGURATION
        - cmake --build . --target run-tests_coverage-lcov --config $PYLENE_CONFIGURATION
        - lcov --list run-tests_coverage-lcov.info
        - cmake --build . --target dist --config $PYLENE_CONFIGURATION
    dependencies: []
    artifacts:
        paths:
            - build/run-tests_coverage-gcovr-html/
            - build/run-tests_coverage-lcov/
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 15 days

.job-build-linux-coverage: &distcheck-linux-coverage
    image: ${DOCKER_IMAGE}
    stage: test
    script:
        - mkdir build && cd build
        - conan install .. -pr $BUILD_PROFILE --build missing
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=$PYLENE_CONFIGURATION -DPYLENE_CODE_COVERAGE=ON -DGCOV_PATH=$(which $COV)
        - cmake --build . --target build-fixtures --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-pylene --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-apps --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-cli --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target build-tests --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - ctest -L UnitTests --schedule-random --output-on-failure
        - cmake --build . --target run-tests_coverage-gcovr-html --config $PYLENE_CONFIGURATION
        - cmake --build . --target run-tests_coverage-lcov --config $PYLENE_CONFIGURATION
        - lcov --list run-tests_coverage-lcov.info
        - cmake --build . --target dist --config $PYLENE_CONFIGURATION
    dependencies: []
    artifacts:
        paths:
            - build/run-tests_coverage-gcovr-html/
            - build/run-tests_coverage-lcov/
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 15 days

distcheck-linux-gcc7-release:
    <<: *distcheck-linux-base
    variables:
        PYLENE_CONFIGURATION: "Release"
        BUILD_PROFILE: "gcc7"
        CXX: "g++-7"
        CC: "gcc-7"

distcheck-linux-gcc7-debug:
    <<: *distcheck-linux-coverage
    variables:
        PYLENE_CONFIGURATION: "Debug"
        BUILD_PROFILE: "gcc7"
        CXX: "g++-7"
        CC: "gcc-7"
        COV: "gcov-7"

distcheck-linux-gcc8-release:
    <<: *distcheck-linux-base
    variables:
        PYLENE_CONFIGURATION: "Release"
        BUILD_PROFILE: "gcc8"
        CXX: "g++-8"
        CC: "gcc-8"

distcheck-linux-gcc8-debug:
    <<: *distcheck-linux-coverage
    variables:
        PYLENE_CONFIGURATION: "Debug"
        BUILD_PROFILE: "gcc8"
        CXX: "g++-8"
        CC: "gcc-8"
        COV: "gcov-8"

distcheck-linux-clang6-release:
    <<: *distcheck-linux-base
    variables:
        PYLENE_CONFIGURATION: "Release"
        BUILD_PROFILE: "clang6"
        CXX: "clang++-6.0"
        CC: "clang-6.0"

distcheck-linux-clang6-debug:
    <<: *distcheck-linux-coverage
    variables:
        PYLENE_CONFIGURATION: "Debug"
        BUILD_PROFILE: "clang6"
        CXX: "clang++-6.0"
        CC: "clang-6.0"
        COV: "../utils/coverage/llvm-gcov-6.0.sh"

distcheck-linux-clang7-release:
    <<: *distcheck-linux-base
    variables:
        PYLENE_CONFIGURATION: "Release"
        BUILD_PROFILE: "clang7"
        CXX: "clang++-7"
        CC: "clang-7"

distcheck-linux-clang7-debug:
    <<: *distcheck-linux-coverage
    variables:
        PYLENE_CONFIGURATION: "Debug"
        BUILD_PROFILE: "clang7"
        CXX: "clang++-7"
        CC: "clang-7"
        COV: "../utils/coverage/llvm-gcov-7.sh"


#########
# Bench #
#########

.job-bench-linux-base: &distbench-linux-base
    image: ${DOCKER_IMAGE}
    stage: bench
    script:
        - mkdir build && cd build
        - conan install .. -pr $BUILD_PROFILE --build missing
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=$PYLENE_CONFIGURATION
        - cmake --build . --target fetch-external-data --config $PYLENE_CONFIGURATION
        - cmake --build . --target build-bench --config $PYLENE_CONFIGURATION -- -j $(($NBPROC / 2))
        - cmake --build . --target run-all-benchmarks --config $PYLENE_CONFIGURATION
        - ctest -L SpeedTests -V
    tags: [ "pylene-benchmarks" ]
    when: manual
    dependencies: []
    artifacts:
        name: "benchmark-results"
        paths:
            - build/bench/*.json
        expire_in: 15 days

distbench-linux-gcc7-release:
    <<: *distbench-linux-base
    variables:
        PYLENE_CONFIGURATION: "Release"
        BUILD_PROFILE: "gcc7"
        CXX: "g++-7"
        CC: "gcc-7"

distbench-linux-clang6-release:
    <<: *distbench-linux-base
    variables:
        PYLENE_CONFIGURATION: "Release"
        BUILD_PROFILE: "clang6"
        CXX: "clang++-6.0"
        CC: "clang-6.0"

distbench-linux-gcc8-release:
    <<: *distbench-linux-base
    variables:
        PYLENE_CONFIGURATION: "Release"
        BUILD_PROFILE: "gcc8"
        CXX: "g++-8"
        CC: "gcc-8"

distbench-linux-clang7-release:
    <<: *distbench-linux-base
    variables:
        PYLENE_CONFIGURATION: "Release"
        BUILD_PROFILE: "clang6"
        CXX: "clang++-7"
        CC: "clang-7"


#################
# Documentation #
#################

.documentation-base:  &documentation-base
    image: ${DOCKER_IMAGE}
    stage: test
    script:
        - mkdir build && cd build
        - conan install .. -pr pylene_default --build missing
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Release
        - cmake --build . --target build-doc --config Release -- -j $(($NBPROC / 2))
        - mkdir ../public && mv doc/build/* ../public/
    artifacts:
        name: "documentation"
        expire_in: 2 days
        paths:
            - public/

# Generate doc only
documentation:
    <<: *documentation-base
    except:
        - dev


##########
# Deploy #
##########

pages:
    <<: *documentation-base
    only:
        - dev

package:
    image: ${DOCKER_IMAGE}
    stage: deploy
    dependencies: []
    script:
        - mkdir build && cd build
        - conan install .. -pr pylene_default --build missing
        - conan user carlinet -r lrde-public -p $CONAN_LRDE_API_KEY
        - conan create .. --build missing $PACKAGE_NAME/$PACKAGE_VERSION@$CONAN_USER/$PACKAGE_TAG
        - conan upload -r lrde-public --all $PACKAGE_NAME/$PACKAGE_VERSION@$CONAN_USER/$PACKAGE_TAG
    only: [ "dev", "development/ranges" ]
