stages:
    - build
    - test
    - bench
    - deploy

cache:
    paths:
        - .cache/conan/
        - .cache/ccache/data

variables:
    FEDORA_32: "${CI_REGISTRY}/olena/pylene-dockers/fedora-32"
    FEDORA_34: "${CI_REGISTRY}/olena/pylene-dockers/fedora-34"
    FEDORA_35: "${CI_REGISTRY}/olena/pylene-dockers/fedora-35"
    FEDORA_36: "${CI_REGISTRY}/olena/pylene-dockers/fedora-36"
    FEDORA_37: "${CI_REGISTRY}/olena/pylene-dockers/fedora-37"
    UBUNTU: "${CI_REGISTRY}/olena/pylene-dockers/ubuntu-toolchain:24.04"
    CMAKE_BUILD_PARALLEL_LEVEL: 6
    CCACHE_DIR: "${CI_PROJECT_DIR}/.cache/ccache/data"
    CCACHE_MAXSIZE: 2G
    DOC_PERSIST_BRANCHES: "master:next"

before_script:
    - pip install --upgrade conan
    - conan profile detect
    - conan config install ci/conan
    #- ccache -p
    #- ccache -s

########
# Test #
########

windows-debug:
    before_script:
        - Invoke-BatchFile -Path "${env:VCVAR2022}" -Parameters "${env:ARCH}"
    stage: build
    script:
        - conan install . -s build_type=Debug -s compiler.cppstd=20 -of . --build missing --deployer=./utils/copy-dlls --deployer-folder=./dlls
        - cmake -S . -B build --preset conan-default
        - cmake --build build --target build-tests --config Debug --preset conan-debug --parallel 4
        - $env:PATH = -join($env:PATH, ";",  $(Join-Path -Path $(Get-Location) -ChildPath dlls))
        - ctest -C Debug -L UnitTests --test-dir build --schedule-random --output-on-failure
    dependencies: []
    artifacts:
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 1 week
    tags: [windows]
    rules:
        - when: manual
          allow_failure: true
    variables:
        VCVAR2019: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat'
        VCVAR2022: 'C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvarsall.bat'
        ARCH: x64
        CONAN_USE_ALWAYS_SHORT_PATHS: 1

.distcheck-linux-base:
    stage: build
    script:
        - conan install . --build missing -s build_type=${build_type} -r lrde-public --profile $CONAN_PROFILE
        - cmake -S . -B ./build --preset ${cmake_preset}
        - cmake --build ./build --target Pylene-core
        - cmake --build ./build --target build-tests
        - ctest --test-dir ./build -L UnitTests --schedule-random --output-on-failure
    dependencies: []
    artifacts:
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 1 week

.distcheck-release:
    extends: .distcheck-linux-base
    variables:
        build_type: "Release"
        cmake_preset: "conan-release"
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"

.distcheck-debug:
    extends: .distcheck-linux-base
    variables:
        build_type: "Debug"
        cmake_preset: "conan-debug"
        CFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
        CXXFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined



# Msan not available for gcc. It requires instrumented libstdc++ and instrumented thirdparties so it is disabled for now.
# No tsan because no multithreaded code for now
# Asan, memsan and tsan are incompatible with each other within the same binary
# Asan and ubsan can work together

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH


distcheck:
    parallel:
        matrix:
            - PROFILE: [gcc-10, gcc-11, gcc-12, gcc-13, gcc-14, clang-14, clang-15, clang-16, clang-17, clang-18]
              BUILD_TYPE: [debug, release]
    image: ${UBUNTU}
    extends: .distcheck-linux-base
    variables:
        CONAN_PROFILE: ${PROFILE}
    rules:
        - if: $BUILD_TYPE == "debug"
          variables:
            build_type: "Debug"
            cmake_preset: "conan-debug"
            CFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
            CXXFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
        - if: $BUILD_TYPE == "release"
          variables:
            build_type: "Release"
            cmake_preset: "conan-release"
        - if: $BUILD_TYPE == "release" && $CI_MERGE_REQUEST_ID
        - if: $BUILD_TYPE == "release" && $CI_COMMIT_BRANCH == "master"
        - if: $BUILD_TYPE == "debug"


linux-coverage:
    extends: .distcheck-debug
    image: ${FEDORA_36}
    after_script:
        - mkdir coverage
        - cd build && gcovr --root .. --filter '\.\./pylene' . -s --xml ../coverage/cobertura-coverage.xml --html-details ../coverage/index.html --gcov-ignore-parse-errors
    variables:
        CONAN_PROFILE: native
        CXXFLAGS: -fprofile-arcs -ftest-coverage
        CFLAGS: -fprofile-arcs -ftest-coverage
    artifacts:
        paths:
            - coverage/
        reports:
            coverage_report:
                coverage_format: cobertura
                path: coverage/cobertura-coverage.xml
        expire_in: 1 week
    coverage: '/lines: \d+\.\d+\%/'
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"

#########
# Bench #
#########

distbench-linux-gcc12-release:
    stage: bench
    image: ${FEDORA_36}
    script:
        - conan install . --build missing --profile native -of ./build -r lrde-public
        - cmake -S . -B ./build --preset conan-release
        - cmake --build ./build --target fetch-external-data
        - cmake --build ./build --target build-bench
        - cmake --build ./build --target run-all-benchmarks
        - ctest --test-dir ./build -L SpeedTests -V
    tags: ["pylene-benchmarks"]
    when: manual
    dependencies: []
    artifacts:
        name: "benchmark-results"
        paths:
            - build/bench/*.json
        expire_in: 1 week



#################
# Documentation #
#################

.documentation-base:
    image: ${FEDORA_36}
    stage: build
    script:
        - conan install . --build missing --profile native -r lrde-public
        - cmake -S . -B ./build --preset conan-release
        - cmake --build ./build --target build-doc
        - mkdir -p ${DOCDIR} && mv build/doc/sphinx/* ${DOCDIR}
    artifacts:
        name: "documentation"
        expire_in: 1 week
        paths: [ public/ ]
    variables: { DOCDIR: "public/${CI_COMMIT_REF_SLUG}" }

# Generate doc only
documentation:
    extends: .documentation-base
    except:
        - master
        - next

# Deploy documentation
pages:
    extends: .documentation-base
    variables: { CURRENT_BRANCH: "${CI_COMMIT_REF_SLUG}" }
    after_script:
        - /usr/bin/bash utils/retrieve-artifacts.sh
        - python3 utils/write-index.py
    only:
        - master
        - next

deploy-all-docs-to-pages:
    image: ${FEDORA_36}
    stage: deploy
    rules:
        - when: manual
          allow_failure: true
    variables: { CURRENT_BRANCH: "None" }
    script:
        - mkdir -p public
        - /usr/bin/bash utils/retrieve-artifacts.sh
        - python3 utils/write-index.py
    artifacts:
        name: "all-documentation"
        expire_in: 1 week
        paths: [ public/ ]

##########
# Deploy #
##########

# Ensure package creation on merge request
create-package:
    stage: build
    image: gcc:10
    before_script:
        - which funzip || ( apt-get update -qq && apt-get install -qq -y unzip && apt-get clean -qq )                                                                                                         # Install funzip
        - wget -q https://github.com/ninja-build/ninja/releases/download/v1.12.1/ninja-linux.zip -O - | funzip > /usr/local/bin/ninja && chmod +x /usr/local/bin/ninja            # Install ninja
        - wget -q https://github.com/Kitware/CMake/releases/download/v3.30.4/cmake-3.30.4-linux-x86_64.sh -O /tmp/cmake.sh && sh /tmp/cmake.sh --skip-license --prefix=/usr/local # Install cmake
        - wget -q https://github.com/conan-io/conan/releases/download/2.8.0/conan-2.8.0-linux-x86_64.tgz -O - | tar -xzf - -C /usr/local                                          # Install conan
        - conan profile detect
        - conan config install ci/conan
    script:
        - conan create . --profile native --build missing --build openjpeg* --version head --user lrde --channel ${CONAN_CHANNEL}
        - conan create . --profile native --build missing --build openjpeg* --version head --user lrde --channel ${CONAN_CHANNEL} -o pylene/*:fPIC=True
        - conan create . --profile native --build missing --build openjpeg* --version head --user lrde --channel ${CONAN_CHANNEL} -o pylene/*:shared=True
    variables:
        CONAN_CHANNEL: "unstable"
    rules:
        - if: $CI_MERGE_REQUEST_ID

deploy-package:
    parallel:
        matrix:
            - GCC: ["gcc:10", "gcc:11", "gcc:12", "gcc:13", "gcc:14"]
    stage: deploy
    before_script: !reference [create-package, before_script]
    script: !reference [create-package, script]
    after_script:
        - conan remote login -p $CONAN_PASSWORD lrde-public $CONAN_LOGIN_USERNAME
        - conan upload pylene/head@lrde/$CONAN_CHANNEL -r lrde-public
        - conan remote logout lrde-public
    image: ${GCC}
    variables:
        CONAN_REVISIONS_ENABLED: 1
    rules:
        - if: $CI_COMMIT_BRANCH == "master"
          variables: { CONAN_CHANNEL: "stable" }
        - if: $CI_COMMIT_BRANCH == "next"
          variables: { CONAN_CHANNEL: "unstable" }
