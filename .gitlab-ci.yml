stages:
    - build
    - test
    - bench
    - deploy


variables:
    FEDORA_30: "${CI_REGISTRY}/olena/pylene/fedora-rawhide-pybind" # stdlibc++ 9.1.1-2 not yet in fedora-30
    FEDORA_29: "${CI_REGISTRY}/olena/pylene/fedora-29-pybind"
    BUILD_DOCKER: 'false'
    PACKAGE_NAME: "pylene" # Conan package name
    PACKAGE_TAG: "experimental" # Conan tag
    PACKAGE_VERSION: "head" # Version to build
    CONAN_USER: "lrde"
    CMAKE_BUILD_PARALLEL_LEVEL: 6

#########
# Build #
#########
.job-build-docker-base: &build-docker-base
    stage: build
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
        - docker build -t ${FEDORA_30} -f utils/docker-fedora/Dockerfile --build-arg VERSION=rawhide --no-cache .
        - docker build -t ${FEDORA_29} -f utils/docker-fedora/Dockerfile --build-arg VERSION=29 --no-cache .
        - docker push ${FEDORA_30}
        - docker push ${FEDORA_29}

build-docker-manual:
    <<: *build-docker-base
    when: manual

build-docker-automatic:
    <<: *build-docker-base
    only:
        variables:
            - $BUILD_DOCKER =~ /true/i


########
# Test #
########

windows-debug:
    stage: test
    script:
        - Invoke-BatchFile -Path $env:VCVAR2019 -Parameters $env:ARCH
        - mkdir build; cd build
        - conan install .. -s build_type=Debug --build missing
        - rm Findrange-v3.cmake
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=debug -D CMAKE_TOOLCHAIN_FILE="C:\vcpkg\scripts\buildsystems\vcpkg.cmake"
        - cmake --build . --target build-tests
        - ctest -L UnitTests --schedule-random --output-on-failure
    dependencies: []
    artifacts:
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 15 days
    tags: [ windows ]
    when: manual
    variables:
        VCVAR2019: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat'
        ARCH: x64



.job-build-linux-base: &distcheck-linux-base
    stage: test
    script:
        - mkdir build && cd build
        - conan install .. -pr pylene_default --build missing -e CXX=g++ -e CC=gcc
        - rm Findrange-v3.cmake
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=$PYLENE_CONFIGURATION -DPYLENE_CODE_COVERAGE=OFF -DSANITIZE_ADDRESS=$ASAN -DSANITIZE_MEMORY=$MSAN -DSANITIZE_UNDEFINED=$UBSAN $OTHER_CMAKE_ARGS
        - cmake --build . --target build-fixtures --config $PYLENE_CONFIGURATION
        - cmake --build . --target Pylene --config $PYLENE_CONFIGURATION
        - cmake --build . --target build-tests --config $PYLENE_CONFIGURATION
        - ctest -L UnitTests --schedule-random --output-on-failure
    dependencies: []
    artifacts:
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 15 days

.job-build-linux-coverage: &distcheck-linux-coverage
    stage: test
    script:
        - mkdir build && cd build
        - conan install .. -pr pylene_default --build missing -e CXX=g++ -e CC=gcc
        - rm Findrange-v3.cmake
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=$PYLENE_CONFIGURATION -DPYLENE_CODE_COVERAGE=ON -DGCOV_PATH=$COV -DSANITIZE_ADDRESS=$ASAN -DSANITIZE_MEMORY=$MSAN -DSANITIZE_UNDEFINED=$UBSAN $OTHER_CMAKE_ARGS
        - cmake --build . --target build-fixtures --config $PYLENE_CONFIGURATION
        - cmake --build . --target Pylene --config $PYLENE_CONFIGURATION
        - cmake --build . --target build-tests --config $PYLENE_CONFIGURATION
        - cmake --build . --target run-tests_coverage-gcovr-html --config $PYLENE_CONFIGURATION
        - cmake --build . --target run-tests_coverage-lcov --config $PYLENE_CONFIGURATION
        - lcov --list run-tests_coverage-lcov.info
    dependencies: []
    artifacts:
        paths:
            - build/run-tests_coverage-gcovr-html/
            - build/run-tests_coverage-lcov/
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 15 days


# Msan not available for gcc. It requires instrumented libstdc++ and instrumented thirdparties so it is disabled for now.
# No tsan because no multithreaded code for now
# Asan, memsan and tsan are incompatible with each other within the same binary
# Asan and ubsan can work together


# distcheck-linux-gcc8-release:
#     <<: *distcheck-linux-base
#     image: ${FEDORA_29}
#     variables:
#         PYLENE_CONFIGURATION: "Release"
#         CXX: "g++"
#         CC: "gcc"
#         ASAN: "OFF"
#         MSAN: "OFF"
#         UBSAN: "OFF"
#         OTHER_CMAKE_ARGS: "-DCMAKE_CXX_EXTENSIONS=OFF" # This fixes a GCC ICE
# 
# distcheck-linux-gcc8-debug:
#     <<: *distcheck-linux-base
#     image: ${FEDORA_29}
#     variables:
#         PYLENE_CONFIGURATION: "Debug"
#         CXX: "g++"
#         CC: "gcc"
#         COV: "/usr/bin/gcov"
#         ASAN: "ON"
#         MSAN: "OFF"
#         UBSAN: "ON"
#         OTHER_CMAKE_ARGS: "-DCMAKE_CXX_EXTENSIONS=OFF" # This fixes a GCC ICE

distcheck-linux-gcc9-release:
    <<: *distcheck-linux-base
    image: ${FEDORA_30}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "g++"
        CC: "gcc"
        ASAN: "OFF"
        MSAN: "OFF"
        UBSAN: "OFF"
        OTHER_CMAKE_ARGS: "-DCMAKE_CXX_EXTENSIONS=OFF" # This fixes a GCC ICE

distcheck-linux-gcc9-debug-asan-ubsan:
    <<: *distcheck-linux-base
    image: ${FEDORA_30}
    variables:
        PYLENE_CONFIGURATION: "Debug"
        CXX: "g++"
        CC: "gcc"
        ASAN: "ON"
        MSAN: "OFF"
        UBSAN: "ON"
        OTHER_CMAKE_ARGS: "-DCMAKE_CXX_EXTENSIONS=OFF" # This fixes a GCC ICE


distcheck-linux-gcc9-debug-coverage:
    <<: *distcheck-linux-coverage
    image: ${FEDORA_30}
    variables:
        PYLENE_CONFIGURATION: "Debug"
        CXX: "g++"
        CC: "gcc"
        COV: "/usr/bin/gcov"
        ASAN: "OFF"
        MSAN: "OFF"
        UBSAN: "OFF"
        OTHER_CMAKE_ARGS: "-DCMAKE_CXX_EXTENSIONS=OFF" # This fixes a GCC ICE
    when: manual

# distcheck-linux-clang7-release:
#     <<: *distcheck-linux-base
#     image: ${FEDORA_29}
#     variables:
#         PYLENE_CONFIGURATION: "Release"
#         CXX: "clang++"
#         CC: "clang"
#         ASAN: "OFF"
#         MSAN: "OFF"
#         UBSAN: "OFF"
#         OTHER_CMAKE_ARGS: ""
# 
# distcheck-linux-clang7-debug:
#     <<: *distcheck-linux-base
#     image: ${FEDORA_29}
#     variables:
#         PYLENE_CONFIGURATION: "Debug"
#         CXX: "clang++"
#         CC: "clang"
#         COV: "/usr/local/bin/llvm/gcov"
#         ASAN: "ON"
#         MSAN: "OFF"
#         UBSAN: "ON"
#         OTHER_CMAKE_ARGS: ""

# distcheck-linux-clang8-release:
#     <<: *distcheck-linux-base
#     image: ${FEDORA_30}
#     variables:
#         PYLENE_CONFIGURATION: "Release"
#         CXX: "clang++"
#         CC: "clang"
#         ASAN: "OFF"
#         MSAN: "OFF"
#         UBSAN: "OFF"
#         OTHER_CMAKE_ARGS: ""
# 
# distcheck-linux-clang8-debug:
#     <<: *distcheck-linux-base
#     image: ${FEDORA_30}
#     variables:
#         PYLENE_CONFIGURATION: "Debug"
#         CXX: "clang++"
#         CC: "clang"
#         COV: "/usr/local/bin/llvm/gcov"
#         ASAN: "ON"
#         MSAN: "OFF"
#         UBSAN: "ON"
#         OTHER_CMAKE_ARGS: ""


#########
# Bench #
#########

.job-bench-linux-base: &distbench-linux-base
    image: ${FEDORA_30}
    stage: bench
    script:
        - mkdir build && cd build
        - conan install .. -pr $BUILD_PROFILE --build missing -e CXX=g++ -e CC=gcc
        - rm Findrange-v3.cmake
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=$PYLENE_CONFIGURATION
        - cmake --build . --target fetch-external-data --config $PYLENE_CONFIGURATION
        - cmake --build . --target build-bench --config $PYLENE_CONFIGURATION
        - cmake --build . --target run-all-benchmarks --config $PYLENE_CONFIGURATION
        - ctest -L SpeedTests -V
    tags: [ "pylene-benchmarks" ]
    when: manual
    dependencies: []
    artifacts:
        name: "benchmark-results"
        paths:
            - build/bench/*.json
        expire_in: 15 days

distbench-linux-gcc8-release:
    <<: *distbench-linux-base
    image: ${FEDORA_29}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "g++"
        CC: "gcc"

distbench-linux-clang7-release:
    <<: *distbench-linux-base
    image: ${FEDORA_29}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "clang++"
        CC: "clang"

distbench-linux-gcc9-release:
    <<: *distbench-linux-base
    image: ${FEDORA_30}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "g++"
        CC: "gcc"

distbench-linux-clang8-release:
    <<: *distbench-linux-base
    image: ${FEDORA_30}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "clang++"
        CC: "clang"


#################
# Documentation #
#################

.documentation-base:  &documentation-base
    image: ${FEDORA_30}
    stage: test
    script:
        - mkdir build && cd build
        - conan install .. -pr pylene_default --build missing -e CXX=g++ -e CC=gcc
        - rm Findrange-v3.cmake
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Release
        - cmake --build . --target build-doc --config Release
        - mkdir ../public && mv doc/sphinx/* ../public/
    artifacts:
        name: "documentation"
        expire_in: 2 days
        paths:
            - public/

# Generate doc only
documentation:
    <<: *documentation-base
    except:
        - dev


##########
# Deploy #
##########

pages:
    <<: *documentation-base
    only:
        - dev

package:
    image: ${FEDORA_30}
    stage: deploy
    dependencies: []
    script:
        - mkdir build && cd build
        - conan profile update settings.compiler.libcxx=libstdc++11 default
        - conan install .. -pr pylene_default --build missing -e CXX=g++ -e CC=gcc
        - conan user carlinet -r lrde-public -p $CONAN_LRDE_API_KEY
        - conan create .. $CONAN_USER/$PACKAGE_TAG --build missing -e CXX=g++ -e CC=gcc
        - conan upload -r lrde-public --all $PACKAGE_NAME/$PACKAGE_VERSION@$CONAN_USER/$PACKAGE_TAG
    only: [ "dev", "development/ranges", "development/cpp20" ]
