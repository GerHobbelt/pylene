stages:
    - build
    - test
    - bench
    - deploy

cache:
    paths:
        - .cache/conan/data

variables:
    FEDORA_RAWHIDE: "${CI_REGISTRY}/olena/pylene-dockers/fedora-rawhide"
    FEDORA_31: "${CI_REGISTRY}/olena/pylene-dockers/fedora-31"
    FEDORA_32: "${CI_REGISTRY}/olena/pylene-dockers/fedora-32"
    PACKAGE_NAME: "pylene"                                                      # Conan package name
    PACKAGE_TAG: "stable"                                                       # Conan tag
    PACKAGE_VERSION: "head"                                                     # Version to build
    CMAKE_BUILD_PARALLEL_LEVEL: 6
    CONAN_USER: "lrde"
    CONAN_PROFILE: "gcc-9"
    ASAN: "OFF"
    MSAN: "OFF"
    UBSAN: "OFF"

before_script:
        - conan config set storage.path="${CI_PROJECT_DIR}/.cache/conan/data"

########
# Test #
########

windows-debug:
    before_script:
        - conan config set storage.path="${env:CI_PROJECT_DIR}\.cache\conan\data"
        - Invoke-BatchFile -Path "${env:VCVAR2019}" -Parameters "${env:ARCH}"
    stage: build
    script:
        - mkdir build; cd build
        - conan install .. -s build_type=Debug --build missing -o pybind=True
        - rm Findpybind11.cmake
        - cmake .. -G Ninja -DCMAKE_BUILD_TYPE=debug -D CMAKE_TOOLCHAIN_FILE="C:\vcpkg\scripts\buildsystems\vcpkg.cmake"
        - cmake --build . --target build-tests
        - ctest -L UnitTests --schedule-random --output-on-failure
        - cmake --build . --target build-pybind
        - cmake --build . --target run-all-pytests
    dependencies: []
    artifacts:
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 1 week
    tags: [ windows ]
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"
        - when: manual
          allow_failure: true
    variables:
        VCVAR2019: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat'
        ARCH: x64

.job-build-linux-base: &distcheck-linux-base
    stage: build
    script:
        - mkdir build && cd build
        - conan install .. --build missing -e CXXFLAGS="" -e CCFLAGS="" -pr $CONAN_PROFILE -o pybind=True
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=$PYLENE_CONFIGURATION -DSANITIZE_ADDRESS=$ASAN -DSANITIZE_MEMORY=$MSAN -DSANITIZE_UNDEFINED=$UBSAN
        - cmake --build . --target Pylene
        - cmake --build . --target build-tests
        - ctest -L UnitTests --schedule-random --output-on-failure
        - cmake --build . --target build-pybind
        - cmake --build . --target run-all-pytests
    dependencies: []
    artifacts:
        reports:
            junit: [build/tests/UT*.xml, build/bench/tests/UT*.xml]
        expire_in: 1 week

# Msan not available for gcc. It requires instrumented libstdc++ and instrumented thirdparties so it is disabled for now.
# No tsan because no multithreaded code for now
# Asan, memsan and tsan are incompatible with each other within the same binary
# Asan and ubsan can work together


distcheck-linux-gcc9-release:
    <<: *distcheck-linux-base
    image: ${FEDORA_31}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "g++"
        CC: "gcc"
        CONAN_PROFILE: "gcc-9"


distcheck-linux-gcc9-debug-asan-ubsan:
    <<: *distcheck-linux-base
    image: ${FEDORA_31}
    variables:
        PYLENE_CONFIGURATION: "Debug"
        CXX: "g++"
        CC: "gcc"
        ASAN: "ON"
        MSAN: "OFF"
        UBSAN: "ON"
        CONAN_PROFILE: "gcc-9"

distcheck-linux-clang10-release:
    <<: *distcheck-linux-base
    image: ${FEDORA_32}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "clang++"
        CC: "clang"
        CONAN_PROFILE: "clang-10"
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"

distcheck-linux-clang10-debug:
    <<: *distcheck-linux-base
    image: ${FEDORA_32}
    variables:
        PYLENE_CONFIGURATION: "Debug"
        CXX: "clang++"
        CC: "clang"
        CCFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
        CXXFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
        CONAN_PROFILE: "clang-10"

distcheck-linux-gcc10-release:
    <<: *distcheck-linux-base
    image: ${FEDORA_32}
    variables:
        PYLENE_CONFIGURATION: "Release"
        CXX: "g++"
        CC: "gcc"
        CONAN_PROFILE: "gcc-10"
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"


distcheck-linux-gcc10-debug:
    <<: *distcheck-linux-base
    image: ${FEDORA_32}
    variables:
        PYLENE_CONFIGURATION: "Debug"
        CXX: "g++"
        CC: "gcc"
        CCFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
        CXXFLAGS: -fsanitize=address -fno-omit-frame-pointer -fsanitize=undefined
        CONAN_PROFILE: "gcc-10"


distcheck-linux-coverage:
    <<: *distcheck-linux-base
    image: ${FEDORA_31}
    after_script:
        - mkdir coverage
        - gcovr --root pylene build -s --xml cobertura --html-details coverage/index.html
    variables:
        PYLENE_CONFIGURATION: "Debug"
        CXX: "g++"
        CC: "gcc"
        CXXFLAGS: "-fprofile-arcs -ftest-coverage"
        CFLAGS: "-fprofile-arcs -ftest-coverage"
    artifacts:
        paths:
            - coverage/
        reports:
            cobertura: cobertura
        expire_in: 1 week
    coverage: '/lines: \d+\.\d+\%/'
    rules:
        - if: $CI_MERGE_REQUEST_ID
        - if: $CI_COMMIT_BRANCH == "master"

#########
# Bench #
#########

.job-bench-linux-base: &distbench-linux-base
    stage: bench
    script:
        - mkdir build && cd build
        - conan install .. -pr gcc-9 --build missing
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Release
        - cmake --build . --target fetch-external-data
        - cmake --build . --target build-bench
        - cmake --build . --target run-all-benchmarks
        - ctest -L SpeedTests -V
    tags: [ "pylene-benchmarks" ]
    when: manual
    dependencies: []
    artifacts:
        name: "benchmark-results"
        paths:
            - build/bench/*.json
        expire_in: 1 week

distbench-linux-gcc9-release:
    <<: *distbench-linux-base
    image: ${FEDORA_31}
    variables:
        CXX: "g++"
        CC: "gcc"



#################
# Documentation #
#################

.documentation-base:  &documentation-base
    image: ${FEDORA_31}
    stage: build
    script:
        - mkdir build && cd build
        - conan install -u .. -pr gcc-9 --build missing
        - cmake -G Ninja .. -DCMAKE_BUILD_TYPE=Release
        - cmake --build . --target build-doc
        - mkdir ../public && mv doc/sphinx/* ../public/
    artifacts:
        name: "documentation"
        expire_in: 1 week
        paths:
            - public/

# Generate doc only
documentation:
    <<: *documentation-base
    except:
        - master


##########
# Deploy #
##########

pages:
    <<: *documentation-base
    only:
        - master

package:
    image: ${FEDORA_31}
    stage: deploy
    dependencies: []
    script:
        - mkdir build && cd build
        - conan user carlinet -r lrde-public -p $CONAN_LRDE_API_KEY
        - conan create .. $CONAN_USER/$PACKAGE_TAG -pr gcc-9 --build missing -e CXX=g++ -e CC=gcc
        - conan upload -r lrde-public --all $PACKAGE_NAME/$PACKAGE_VERSION@$CONAN_USER/$PACKAGE_TAG
    rules:
        - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "development/cpp20"
