Image (Concept)
===============

Overview of the image concept.

+-----------------------------------+-------------------+
| Properties                        |                   |
+===================================+===================+
|           Forward Image           | ``ima.values()``  |
|                                   | ``ima.pixels()``  |
|                                   | ``ima.domain()``  |
|                                   |                   |
+------+----------------------------+-------------------+
|      |    Bidirectional Image     |                   |
|      |                            |                   |
+------+-------+--------------------+-------------------+
|              | Random Access Image| ``ima(p)``        |
|              |                    |                   |
+--------------+------+-------------+-------------------+
|                     | Raw Image   |                   |
|                     |             |                   |
+---------------------+-------------+-------------------+

.. contents::
   :local:

.. concept:: Forward Image

Forward Image
-------------

*  `I`: A model of :concept:`Forward Image`
*  `ima`: An instance of `I`
*  `cima`: A constant instance of `I`

.. rubric:: `Type definition`
   :class: concept-typedefs

+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|Type                            | Abbr  |                Definition                 |Requirements                               |
|                                |       |                                           |                                           |
+================================+=======+===========================================+===========================================+
|`I::point_type`                 | ``P`` |  ``range_value<domain_type>::type``       |                                           |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::domain_type`                |       |                                           |A model of :concept:`Forward Range`        |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::value_type`                 | ``V`` |                                           |                                           |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::reference`                  |       |                                           |                                           |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::const_reference`            |       |                                           |                                           |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::value_range`                |       |                                           |A model of :concept:`Forward Range`        |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::const_value_range`          |       |                                           |A model of :concept:`Forward Range`        |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::pixel_type`                 |       |                                           |A model of :concept:`pixel`                |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::const_pixel_type`           |       |                                           |                                           |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::pixel_range`                |       |                                           |A model of :concept:`Forward Range`        |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::const_pixel_range`          |       |                                           |A model of :concept:`Forward Range`        |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|``mln_concrete(I)``             |       |                                           |A model of :concept:`Writable Image`       |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|``mln_ch_value(I, V2)``         |       |                                           |A model of :concept:`Writable Image`       |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`image_traits<I>::category`     |       |                                           |Convertible to `forward_image_tag`         |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`image_traits<I>::accessible`   |       | either `std::true_type` or                |                                           |
|                                |       | `std:false_type`                          |                                           |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`image_traits<I>::indexable`    |       | either `std::true_type` or                |                                           |
|                                |       | `std::false_type`                         |                                           |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`image_traits<I>::concrete`     |       | either `std::true_type` or                |                                           |
|                                |       | `std::false_type`                         |                                           |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`image_traits<I>::extension`    |       | either `extension::none_extension_tag`,   |                                           |
|                                |       | `extension::border_extension_tag`,        |                                           |
|                                |       | `extension::value_extension_tag` or       |                                           |
|                                |       | `extension::image_extension_tag`          |                                           |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
  
.. rubric:: `Valid expression`
   :class: concept-expr

+----------------------+-------------------------+----------------+------------------------------------------------------+
|Expression            | Return Type             | Precondition   | Sementics                                            |
+======================+=========================+================+======================================================+
|   ``ima.domain()``   | ``I::domain_type``      |                | The domain of the image.                             |
+----------------------+-------------------------+----------------+------------------------------------------------------+
|   ``ima.values()``   | ``I::value_range``      |                | A range that allows to traverse image values (and to |
|                      |                         |                | modify them if the image is mutable)                 |
+----------------------+-------------------------+----------------+------------------------------------------------------+
|   ``ima.pixels()``   | ``I::pixel_range``      |                | A range that allows to traverse image pixels (and to |
|                      |                         |                | modify them if the image is mutable)                 |
+----------------------+-------------------------+----------------+------------------------------------------------------+
|  ``cima.values()``   | ``I::const_value_range``|                | A range that allows to traverse the image values but |
|                      |                         |                | not to modify them.                                  |
+----------------------+-------------------------+----------------+------------------------------------------------------+
|  ``cima.pixels()``   | ``I::const_pixel_range``|                | A range that allows to traverse the image pixels but |
|                      |                         |                | not to modify them.                                  |
+----------------------+-------------------------+----------------+------------------------------------------------------+
| ``cima.extension()`` | *unspecified* (model of |                | Return the extension of the image (if available).    |
|                      |  :concept:`Extension`)  |                |                                                      |
+----------------------+-------------------------+----------------+------------------------------------------------------+

.. concept:: Bidirectional Image

Bidirectional Image
-------------------


.. rubric:: `Type definition`
   :class: concept-typedefs

+-------------------------+-------+-------------------------------------------+-----------------------------------------------+
| Type                    | Abbr  |                Definition                 |             Requirements                      |
+=========================+=======+===========================================+===============================================+
| `I::domain_type`        |       |                                           | A model of :concept:`Bidirectional Range`     |
+-------------------------+-------+-------------------------------------------+-----------------------------------------------+
| `I::value_range`        |       |                                           | A model of :concept:`Bidirectional Range`     |
+-------------------------+-------+-------------------------------------------+-----------------------------------------------+
| `I::const_value_range`  |       |                                           | A model of :concept:`Bidirectional Range`     |
+-------------------------+-------+-------------------------------------------+-----------------------------------------------+
| `I::pixel_range`        |       |                                           | A model of :concept:`Bidirectional Range`     |
+-------------------------+-------+-------------------------------------------+-----------------------------------------------+
| `I::const_pixel_range`  |       |                                           | A model of :concept:`Bidirectional Range`     |
+-------------------------+-------+-------------------------------------------+-----------------------------------------------+


.. concept::  Random Access Image

Random Access Image
-------------------

A Random Acess Image is an image which is a :concept:`Bidirectional Image` and
is both :concept:`Accessible <Accessible Image>` and :concept:`Indexable <Indexable Image>`.


.. concept:: Raw Image

Raw Image
---------

A Raw Image is a :concept:`Random Access Image` which supports pointer
arithmetics to access it values.

.. rubric:: `Type definition`

+--------------------------------+-------+-------------------------------------------+-------------------------------+
|Type                            | Abbr  |                Definition                 |Requirements                   |
|                                |       |                                           |                               |
+================================+=======+===========================================+===============================+
| `I::reference`                 |       | V&                                        |                               |
+--------------------------------+-------+-------------------------------------------+-------------------------------+
| `I::const_reference`           |       | const V&                                  |                               |
+--------------------------------+-------+-------------------------------------------+-------------------------------+

.. rubric:: `Valid expression`
   :class: concept-expr

+----------------------+-------------------------+---------------------------+-----------------------------------------------+
|Expression            |Return Type              | Precondition              | Sementics                                     |
+======================+=========================+===========================+===============================================+
| ``cima.strides()``   | const std::size_t*      |                           | Array of `dim` elements with the strides      |
|                      |                         |                           | information.                                  |
+----------------------+-------------------------+---------------------------+-----------------------------------------------+



.. concept:: Accessible Image

Accessible Image
----------------

.. rubric:: `Notation`

* `p`: An instance of `I::point_type`


.. rubric:: `Type definition`

+--------------------------------+-------+-------------------------------------------+-------------------------------+
|Type                            | Abbr  |                Definition                 |Requirements                   |
|                                |       |                                           |                               |
+================================+=======+===========================================+===============================+
|`image_traits<I>::accessible`   |       | `std::true_type`                          |                               |
+--------------------------------+-------+-------------------------------------------+-------------------------------+

.. rubric:: `Valid expression`
   :class: concept-expr

+----------------------+-------------------------+---------------------------+-----------------------------------------------+
|Expression            |Return Type              | Precondition              | Sementics                                     |
+======================+=========================+===========================+===============================================+
| ``ima(p)``           | `I::reference`          | ``has(ima.domain(), p)``  | Value access with bound checking.             |
+----------------------+-------------------------+---------------------------+-----------------------------------------------+
| ``cima(p)``          | `I::const_reference`    | ``has(cima.domain(), p)`` | Value access with bound checking.             |
+----------------------+-------------------------+---------------------------+-----------------------------------------------+
| ``ima.pixel(p)``     | `I::pixel_type`         | ``has(ima.domain(), p)``  | Pixel access with bound checking.             |
+----------------------+-------------------------+---------------------------+-----------------------------------------------+
| ``cima.pixel(p)``    | `I::const_pixel_type`   | ``has(ima.domain(), p)``  | Pixel access with bound checking.             |
+----------------------+-------------------------+---------------------------+-----------------------------------------------+
| ``ima.at(p)``        | `I::reference`          |                           | Value access without bound checking.          |
+----------------------+-------------------------+---------------------------+-----------------------------------------------+
| ``cima.at(p)``       | `I::const_reference`    |                           | Value access without bound checking.          |
+----------------------+-------------------------+---------------------------+-----------------------------------------------+
| ``ima.pixel_at(p)``  | `I::pixel_type`         |                           | Pixel access without bound checking.          |
+----------------------+-------------------------+---------------------------+-----------------------------------------------+
| ``cima.pixel_at(p)`` | `I::const_pixel_type`   |                           | Pixel access without bound checking.          |
+----------------------+-------------------------+---------------------------+-----------------------------------------------+


.. concept:: Indexable Image

Indexable Image
---------------


.. rubric:: `Type definition`

+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|Type                            | Abbr  |                Definition                 |Requirements                               |
|                                |       |                                           |                                           |
+================================+=======+===========================================+===========================================+
|`image_traits<I>::indexable`    |       | `std::true_type`                          |                                           |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::size_type`                  |       |                                           | An unsigned integral type                 |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+
|`I::difference_type`            |       |                                           | A signed integral type                    |
+--------------------------------+-------+-------------------------------------------+-------------------------------------------+

.. rubric:: `Valid expression`
   :class: concept-expr

+----------------------------+-------------------------+----------------+------------------------------------------------------+
|Expression                  |Return Type              | Precondition   | Sementics                                            |
+============================+=========================+================+======================================================+
| ``ima[k]``                 | `I::reference`          |                |                                                      |
+----------------------------+-------------------------+----------------+------------------------------------------------------+
| ``cima[k]``                | `I::const_reference`    |                |                                                      |
+----------------------------+-------------------------+----------------+------------------------------------------------------+
| ``cima.index_of_point(p)`` | `I::size_type`          |                |                                                      |
+----------------------------+-------------------------+----------------+------------------------------------------------------+
| ``cima.point_at_index(k)`` | `I::point_type`         |                |                                                      |
+----------------------------+-------------------------+----------------+------------------------------------------------------+
| ``cima.delta_index(p)``    | `I::difference_type`    |                |                                                      |
+----------------------------+-------------------------+----------------+------------------------------------------------------+

.. concept:: Concrete Image

Concrete Image
--------------


.. rubric:: `Notation`

* `v`: An instance of `I::value_type`
* `dom`: An instance of `I::domain_type`

.. rubric:: `Type definition`
   :class: concept-typedefs

+--------------------------------+-------+-----------------------------+---------------------------------------------+
|Type                            | Abbr  |         Definition          | Description                                 |
+================================+=======+=============================+=============================================+
|`image_traits<I>::concrete`     |       | `std::true_type`            |                                             |
+--------------------------------+-------+-----------------------------+---------------------------------------------+
|`image_traits<I>::shallow_copy` |       | either `std::true_type` or  | True if the copy constructor makes a        |
|                                |       | `std::false_type`           | shallow copy instead of a deep copy.        |
+--------------------------------+-------+-----------------------------+---------------------------------------------+

.. rubric:: `Valid expression`
   :class: concept-expr

+---------------------------------+-------------+-------------------------+------------------------------------------+
|Expression                       |Return Type  | Precondition            | Sementics                                |
+=================================+=============+=========================+==========================================+
| ``I(const I&, mln::init)``      |             |                         | Initialize from another image (same      |
|                                 |             |                         | domain and same extension if applicable) |
+---------------------------------+-------------+-------------------------+------------------------------------------+
| ``ima.resize(dom)``             |             |                         | Resize `ima` to fit domain `dom`         |
+---------------------------------+-------------+-------------------------+------------------------------------------+
| ``ima.resize(dom, b)``          |             | `ima` has a border      | Resize `ima` to fit domain `dom` with a  |
|                                 |             |                         | border of size `b`.                      |
+---------------------------------+-------------+-------------------------+------------------------------------------+
| ``ima.resize(dom, v)``          |             |                         | Resize `ima` to fit domain `dom` and     |
|                                 |             |                         | copy-initialize data with `v`            |
+---------------------------------+-------------+-------------------------+------------------------------------------+
| ``ima.resize(dom, b, v)``       |             | `ima` has a border      | Same as above.                           |
+---------------------------------+-------------+-------------------------+------------------------------------------+

Moreover, if `I` is a model of :concept:`Indexable Image`

+----------------------------+-------------+----------------+------------------------------------------+
|Expression                  |Return Type  | Precondition   | Sementics                                |
+============================+=============+================+==========================================+
| ``ima.reindex(k)``         |             |                | Affects the index `k` to the first pixel.|
+----------------------------+-------------+----------------+------------------------------------------+
