#ifndef MLN_IO_IMPRINT_HPP
# define MLN_IO_IMPRINT_HPP

# include <iostream>

# include <boost/mpl/if.hpp>
# include <boost/type_traits/is_same.hpp>

# include <mln/core/box.hpp>
# include <mln/core/macros.hpp>


namespace mln
{
  namespace io
  {

    namespace internal
    {

      template <typename Image, typename T>
      void imprint(const Image& ima, box<T, 2> domain)
      {
	typedef typename boost::mpl::if_< boost::is_same<mln_value(Image), uint8>, int, mln_value(Image)>::type t2;
	mln_point(Image) p;
        std::cout << domain << std::endl;
	for (p[0] = domain.pmin[0]; p[0] < domain.pmax[0]; ++p[0]) {
	  for (p[1] = domain.pmin[1]; p[1] < domain.pmax[1]; ++p[1]) {
	    std::cout << ((t2) ima(p)) << " ";
	  }
	  std::cout << std::endl;
	}
      }

    }

    template <typename Image>
    void imprint(const Image& ima)
    {
      internal::imprint(ima, ima.domain());
    }

  }
}

#endif
